@model IEnumerable<GroceryList.DAL.Models.Product>
	@using Newtonsoft.Json

	<div class="col-md-2 col-sm-offset-10">
		@Html.ActionLink("Add new Product", "AddProduct", "Product", new {@class = "btn btn-success"})
	</div>

	<table id="product-list" class="table  table-bordered ">
		<thead>
			<tr>
				<th>Id</th>
				<th>Name</th>
				<th v-on:click="sortByQuantity()" :style="{cursor: 'pointer'}">Quantity</th>
				<th v-on:click="groupByUnits()" :style="{cursor: 'pointer'}">Units</th>
				<th></th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			<tr v-for="(item,i) in list">
				<td>{{i+1}}</td>
				<td>{{item.Name}}</td>
				<td>{{item.Quantity}}</td>
				<td>{{item.unit}}</td>
				<td>
					<button class="btn btn-info" @@click="goToProductDetail(item)">Detail</button>
				</td>
				<td>
					<button class="btn btn-info" @@click="goToProductEdit(item)">Edit</button>
				</td>
				<td>
					<input class="btn btn-danger" type="submit" value="Delete" v-on:click="deleteProduct(item, i)" />
				</td>
			</tr>
		</tbody>
	</table>

	@section scripts{
		<script src="~/lib/vue/vue.js"></script>
		<script>
        var app = new Vue({
            el: "#product-list",
            data: {
                list: @Html.Raw(@JsonConvert.SerializeObject(Model))
            },
            methods: {
                deleteProduct(product, index) {
                    var isConfirmed = confirm(`Confirm delete product ${product.Name}?`);
                    if (isConfirmed) {
                        fetch(`Product/DeleteProduct/${product.Id}`, {method: 'POST'})
                        .then((response) => {
                            console.log(response); this.list.splice(index, 1);
                        });
                    }
                },
                goToProductDetail(product){
					window.location.href = `/Product/DetailProduct/${product.Id}`;
				},
				goToProductEdit(product){
					window.location.href = `/Product/EditProduct/${product.Id}`;
				},
				groupByUnits() {
					this.list.sort((a, b) => {
						if (a.unit > b.unit) {
							return 1;
						}
						if (a.unit < b.unit) {
							return -1;
						}
						return 0;
					});
				},
				sortByQuantity() {
					this.list.sort((a, b) => {
                        if (a.Quantity > b.Quantity) {
                            return -1;
                        }
                        if (a.Quantity < b.Quantity) {
                            return 1;
                        }
                        return 0;
					});
				}
			 }
        });
		</script>
	}
